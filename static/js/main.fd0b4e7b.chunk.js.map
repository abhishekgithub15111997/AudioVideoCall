{"version":3,"sources":["Calls.js","App.js","serviceWorker.js","index.js"],"names":["Calls","props","createOffer","console","log","pc","offerToReceive","then","sdp","JSON","stringify","setLocalDescription","e","setRemoteDescription","desc","parse","textref","value","RTCSessionDescription","createAnswer","offerToReceiveVideo","addCandidate","candidate","addIceCandidate","RTCIceCandidate","localVideoref","React","createRef","remoteVideoref","this","RTCPeerConnection","onicecandidate","oniceconnectionstatechange","onaddstream","current","srcObject","stream","navigator","mediaDevices","getUserMedia","video","window","localStream","addStream","catch","style","width","height","margin","backgroundColor","ref","autoPlay","onClick","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"mMACqBA,E,kDACnB,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAsCPC,YAAY,WACTC,QAAQC,IAAI,SACZ,EAAKC,GAAGH,YAAY,CAACI,eAAe,IACnCC,MAAK,SAAAC,GACFL,QAAQC,IAAIK,KAAKC,UAAUF,IAC3B,EAAKH,GAAGM,oBAAoBH,MAC9B,SAAAI,QA7CY,EA+ChBC,qBAAqB,WACrB,IAAMC,EAAKL,KAAKM,MAAM,EAAKC,QAAQC,OACnC,EAAKZ,GAAGQ,qBAAqB,IAAIK,sBAAsBJ,KAjDvC,EAmDjBK,aAAa,WACZhB,QAAQC,IAAI,UACZ,EAAKC,GAAGc,aAAa,CAACC,oBAAoB,IACzCb,MAAK,SAAAC,GACJL,QAAQC,IAAIK,KAAKC,UAAUF,IAC3B,EAAKH,GAAGM,oBAAoBH,MAC5B,SAAAI,QAzDc,EA2DjBS,aAAa,WACZ,IAAMC,EAAUb,KAAKM,MAAM,EAAKC,QAAQC,OACxCd,QAAQC,IAAI,oBAAoBkB,GAChC,EAAKjB,GAAGkB,gBAAgB,IAAIC,gBAAgBF,KA5D5C,EAAKG,cAAcC,IAAMC,YACzB,EAAKC,eAAeF,IAAMC,YAHV,E,gEAQE,IAAD,OAEjBE,KAAKxB,GAAG,IAAIyB,kBADI,MAElBD,KAAKxB,GAAG0B,eAAe,SAACnB,GACjBA,EAAEU,WACLnB,QAAQC,IAAIK,KAAKC,UAAUE,EAAEU,aAEjCO,KAAKxB,GAAG2B,2BAA2B,SAACpB,GAChCT,QAAQC,IAAIQ,IAEhBiB,KAAKxB,GAAG4B,YAAY,SAACrB,GACnB,EAAKgB,eAAeM,QAAQC,UAAUvB,EAAEwB,QAc1CC,UAAUC,aAAaC,aAXL,CAACC,OAAM,IAYxBjC,MAVa,SAAC6B,GACbK,OAAOC,YAAYN,EACnB,EAAKX,cAAcS,QAAQC,UAAUC,EACrC,EAAK/B,GAAGsC,UAAUP,MAQnBQ,OALa,SAAChC,GACbT,QAAQC,IAAI,sBAAsBQ,Q,+BAiC3B,IAAD,OACR,OACE,6BACE,2BACAiC,MAAO,CAACC,MAAM,IAAIC,OAAO,IAAIC,OAAO,EAAEC,gBAAgB,SACtDC,IAAKrB,KAAKJ,cACV0B,UAAQ,IAER,2BACAN,MAAO,CAACC,MAAM,IAAIC,OAAO,IAAIC,OAAO,EAAEC,gBAAgB,SACtDC,IAAKrB,KAAKD,eACVuB,UAAQ,IAET,6BACC,4BACAC,QAASvB,KAAK3B,aADd,SAGA,4BACAkD,QAASvB,KAAKV,cADd,UAGA,6BACA,8BACA+B,IAAK,SAAAA,GAAM,EAAKlC,QAAQkC,KAGxB,6BACA,4BACAE,QAASvB,KAAKhB,sBADd,mBAGA,4BACAuC,QAASvB,KAAKR,cADd,sB,GA9F6BK,IAAM2B,WCC1B,SAASC,IACtB,OACI,kBAAC,EAAD,MCQcC,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACP,EAAD,OAEFQ,SAASC,eAAe,SDyHpB,kBAAmB1B,WACrBA,UAAU2B,cAAcC,MACrB1D,MAAK,SAAA2D,GACJA,EAAaC,gBAEdvB,OAAM,SAAAwB,GACLjE,QAAQiE,MAAMA,EAAMC,a","file":"static/js/main.fd0b4e7b.chunk.js","sourcesContent":["import React from 'react'\r\nexport default class Calls extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.localVideoref=React.createRef()\r\n    this.remoteVideoref=React.createRef()\r\n  }\r\n\r\n  // const textref=React.createRef()\r\n  \r\n  componentDidMount(){\r\n    const pc_config=null\r\n    this.pc=new RTCPeerConnection(pc_config)\r\n  this.pc.onicecandidate=(e)=>{\r\n      if(e.candidate)\r\n      console.log(JSON.stringify(e.candidate))\r\n  }\r\n  this.pc.oniceconnectionstatechange=(e)=>{\r\n      console.log(e)\r\n  }\r\n  this.pc.onaddstream=(e)=>{\r\n    this.remoteVideoref.current.srcObject=e.stream\r\n  }\r\n\r\n  const constraints={video:true}\r\n\r\n  const success=(stream)=>{\r\n    window.localStream=stream\r\n    this.localVideoref.current.srcObject=stream\r\n    this.pc.addStream(stream)\r\n  }\r\n\r\n  const faliure=(e)=>{\r\n    console.log('getUserMedia Error:',e)\r\n  }\r\n  navigator.mediaDevices.getUserMedia(constraints)\r\n  .then(success)\r\n  .catch(faliure)\r\n  }\r\n\r\n\r\n   createOffer=()=>{\r\n      console.log('offer')\r\n      this.pc.createOffer({offerToReceive:1})\r\n      .then(sdp=>{\r\n          console.log(JSON.stringify(sdp))\r\n          this.pc.setLocalDescription(sdp)\r\n      },e=>{})\r\n  }\r\n    setRemoteDescription=()=>{\r\n    const desc=JSON.parse(this.textref.value)\r\n    this.pc.setRemoteDescription(new RTCSessionDescription(desc))\r\n  }\r\n   createAnswer=()=>{\r\n    console.log('answer')\r\n    this.pc.createAnswer({offerToReceiveVideo:1})\r\n    .then(sdp=>{\r\n      console.log(JSON.stringify(sdp))\r\n      this.pc.setLocalDescription(sdp)\r\n    },e=>{})\r\n  }\r\n   addCandidate=()=>{\r\n    const candidate=JSON.parse(this.textref.value)\r\n    console.log('Adding candidate:',candidate)\r\n    this.pc.addIceCandidate(new RTCIceCandidate(candidate))\r\n  }\r\n  render(){\r\n  return (\r\n    <div>\r\n      <video\r\n      style={{width:240,height:240,margin:5,backgroundColor:'black'}}\r\n      ref={this.localVideoref}\r\n      autoPlay\r\n      ></video>\r\n      <video\r\n      style={{width:240,height:240,margin:5,backgroundColor:'black'}}\r\n      ref={this.remoteVideoref}\r\n      autoPlay\r\n      ></video>\r\n     <br/>\r\n      <button \r\n      onClick={this.createOffer}\r\n      >Offer</button>\r\n      <button\r\n      onClick={this.createAnswer}\r\n      >Answer</button>\r\n      <br/>\r\n      <textarea \r\n      ref={ref=>{this.textref=ref}}\r\n      // ref={textref}\r\n      />\r\n      <br/>\r\n      <button \r\n      onClick={this.setRemoteDescription}\r\n      >set Remote Desc</button>\r\n      <button \r\n      onClick={this.addCandidate}\r\n      >Add Candidate</button>\r\n    </div>\r\n  )\r\n}\r\n}\r\n","import React from 'react'\nimport Calls from './Calls'\nexport default function App() {\n  return (\n      <Calls/>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}